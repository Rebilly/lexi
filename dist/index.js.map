{"version":3,"file":"index.js","mappings":";AAAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack/runtime/compat",".././lib/index.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst github_1 = require(\"@actions/github\");\nconst exec = __importStar(require(\"@actions/exec\"));\nconst github_2 = require(\"./github\");\nconst readability_files_1 = require(\"./readability-files\");\nconst report_1 = require(\"./report\");\nconst markdown_1 = require(\"./markdown\");\nconst main = () => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n        if (!github_1.context.payload.pull_request || !github_1.context.payload.repository) {\n            core.setFailed('This action can only be run on pull requests');\n            return;\n        }\n        // action parameters\n        const token = core.getInput('github-token');\n        const glob = core.getInput('glob');\n        const baseBranchSha = github_1.context.payload.pull_request.base.sha;\n        const headBranchSha = github_1.context.payload.pull_request.head.sha;\n        const prNumber = github_1.context.payload.pull_request.number;\n        const client = (0, github_1.getOctokit)(token);\n        // Run readability on base branch\n        console.log(`Checking out ${baseBranchSha}`);\n        yield exec.exec(`git checkout ${baseBranchSha}`);\n        const oldReadability = (0, readability_files_1.calculateReadability)(glob);\n        // Run readability on head branch\n        console.log(`Checking out ${headBranchSha}`);\n        yield exec.exec(`git checkout ${headBranchSha}`);\n        const newReadability = (0, readability_files_1.calculateReadability)(glob);\n        const fileStatuses = yield (0, github_2.getFileStatusesFromPR)(client, github_1.context, prNumber);\n        const report = (0, report_1.generateReport)(newReadability, oldReadability, fileStatuses);\n        // Only post a comment if there are results from markdown files\n        // changed in this PR\n        if (report.fileResults.length) {\n            const repository = github_1.context.payload.repository.full_name;\n            const commit = github_1.context.payload.pull_request.head.sha;\n            const body = (0, markdown_1.reportToComment)(report, repository, commit);\n            yield (0, github_2.upsertComment)(client, github_1.context, github_1.context.payload.pull_request.number, body, `<!-- ${glob}-code-coverage-assistant -->`);\n        }\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            core.setFailed(`Action failed with error: ${error.message}`);\n        }\n        else {\n            core.setFailed(`Action failed.`);\n        }\n    }\n});\nmain();\n"],"names":[],"sourceRoot":""}